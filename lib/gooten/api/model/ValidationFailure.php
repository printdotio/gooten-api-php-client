<?php
/**
 * ValidationFailure
 *
 * PHP version 5
 *
 * @category Class
 * @package  gooten.api.client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace gooten.api.model;

use \ArrayAccess;
/**
 * ValidationFailure Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     gooten.api.client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ValidationFailure implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'property_name' => 'string',
        'error_message' => 'string',
        'attempted_value' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'property_name' => 'PropertyName',
        'error_message' => 'ErrorMessage',
        'attempted_value' => 'AttemptedValue'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'property_name' => 'setPropertyName',
        'error_message' => 'setErrorMessage',
        'attempted_value' => 'setAttemptedValue'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'property_name' => 'getPropertyName',
        'error_message' => 'getErrorMessage',
        'attempted_value' => 'getAttemptedValue'
    );
  
    
    /**
      * $property_name 
      * @var string
      */
    protected $property_name;
    
    /**
      * $error_message 
      * @var string
      */
    protected $error_message;
    
    /**
      * $attempted_value 
      * @var string
      */
    protected $attempted_value;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->property_name = $data["property_name"];
            $this->error_message = $data["error_message"];
            $this->attempted_value = $data["attempted_value"];
        }
    }
    
    /**
     * Gets property_name
     * @return string
     */
    public function getPropertyName()
    {
        return $this->property_name;
    }
  
    /**
     * Sets property_name
     * @param string $property_name 
     * @return $this
     */
    public function setPropertyName($property_name)
    {
        
        $this->property_name = $property_name;
        return $this;
    }
    
    /**
     * Gets error_message
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->error_message;
    }
  
    /**
     * Sets error_message
     * @param string $error_message 
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        
        $this->error_message = $error_message;
        return $this;
    }
    
    /**
     * Gets attempted_value
     * @return string
     */
    public function getAttemptedValue()
    {
        return $this->attempted_value;
    }
  
    /**
     * Sets attempted_value
     * @param string $attempted_value 
     * @return $this
     */
    public function setAttemptedValue($attempted_value)
    {
        
        $this->attempted_value = $attempted_value;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\gooten.api.client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\gooten.api.client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
